/* Ofront+ 1.0 -sxapC -88 */

#ifndef Heap__oh
#define Heap__oh

#include "SYSTEM.oh"

typedef
  struct Heap_CmdDesc *Heap_Cmd;

typedef
  CHAR Heap_CmdName[48];

typedef
  void (*Heap_Command)(void);

typedef
  struct Heap_CmdDesc {
    Heap_Cmd next;
    Heap_CmdName name;
    Heap_Command cmd;
  } Heap_CmdDesc;

typedef
  void (*Heap_EnumProc)(void(*)(SYSTEM_PTR));

typedef
  void (*Heap_Finalizer)(SYSTEM_PTR);

typedef
  struct Heap_ModuleDesc *Heap_Module;

typedef
  CHAR Heap_ModuleName[48];

typedef
  struct Heap_ModuleDesc {
    Heap_Module next;
    Heap_ModuleName name;
    INTEGER refcnt;
    Heap_Cmd cmds;
    SYSTEM_PTR types;
    Heap_EnumProc enumPtrs;
    char _prvt0[16];
  } Heap_ModuleDesc;


import SYSTEM_PTR Heap_modules;
import LONGINT Heap_allocated;
import LONGINT Heap_heap;
import LONGINT Heap_heapsize, Heap_heapMinExpand;
import SHORTINT Heap_lockGC;
import INTEGER Heap_FileCount;

import void **Heap_ModuleDesc__typ;
import void **Heap_CmdDesc__typ;

import BOOLEAN Heap_DECREF (SYSTEM_PTR mod);
import void Heap_FINALL (void);
import INTEGER Heap_FreeModule (CHAR *name, INTEGER name__len);
import void Heap_GC (BOOLEAN markStack);
import void Heap_INCREF (SYSTEM_PTR mod);
import void Heap_InitHeap (void);
import void Heap_Lock (void);
import void Heap_MarkStack (void);
import void Heap_MarkStack0 (LONGINT sp);
import SYSTEM_PTR Heap_NEWBLK (LONGINT size);
import SYSTEM_PTR Heap_NEWREC (SYSTEM_PTR tag);
import void Heap_REGCMD (SYSTEM_PTR mod, CHAR *name, INTEGER name__len, Heap_Command cmd);
import SYSTEM_PTR Heap_REGMOD (CHAR *name, INTEGER name__len, Heap_EnumProc enumPtrs);
import void Heap_REGTYP (SYSTEM_PTR mod, SYSTEM_PTR typ);
import void Heap_RegisterFinalizer (SYSTEM_PTR obj, Heap_Finalizer finalize);
import void Heap_Unlock (void);
import void *Heap__init (void);


#endif
